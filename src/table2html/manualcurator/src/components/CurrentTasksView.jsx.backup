import React, { useState, useEffect } from 'react';
import RenderCell from './RenderCell';
import { logCurationAction, getTaskLog, clearTaskLog } from '../utils/api';

export default function CurrentTasksView({
  currentTask,
  currentRowIdx,
  currentRow,
  totalRows,
  onPrev,
  onNext,
  onSelect,
  isDark,
  textColor,
}) {
  const [curationMode, setCurationMode] = useState('row');
  const [currentCellIdx, setCurrentCellIdx] = useState(0);
  const [taskLog, setTaskLog] = useState([]);
  const [isTaskFinished, setIsTaskFinished] = useState(false);

  console.log('=== RENDER ===', { isTaskFinished, currentTask: currentTask?.name });

  useEffect(() => {
    if (currentTask?.path) {
      loadTaskLog();
    }
  }, [currentTask?.path]);

  useEffect(() => {
    setCurrentCellIdx(0);
    setTaskLog([]);
    setIsTaskFinished(false);
  }, [currentTask?.path]);

  const loadTaskLog = async () => {
    try {
      const logData = await getTaskLog(currentTask.path);
      setTaskLog(logData.entries || []);
    } catch (err) {
      console.error('Error loading task log:', err);
      setTaskLog([]);
    }
  };

  const handleResetTask = async () => {
    if (window.confirm('Â¿EstÃ¡s seguro?')) {
      try {
        await clearTaskLog(currentTask.path);
        setIsTaskFinished(false);
        setTaskLog([]);
        setCurrentCellIdx(0);
        alert('Tarea reseteada');
      } catch (err) {
        console.error('Error resetting task:', err);
        alert('Error: ' + err.message);
      }
    }
  };

  if (!currentTask || !currentRow || totalRows === 0) {
    return (
      <div style={{ padding: '20px', textAlign: 'center', color: textColor }}>
        <p>Loading task data...</p>
      </div>
    );
  }

  const columns = Object.keys(currentRow).filter(key => key !== '_metadata');
  const totalCells = columns.length;

  const handleCellNext = async () => {
    console.log('=== CELL NEXT ===');
    
    const cellKey = columns[currentCellIdx];
    const cellValue = currentRow[cellKey];
    const metadata = currentRow._metadata || {};
    
    const isLastCell = currentRowIdx >= totalRows - 1 && currentCellIdx >= totalCells - 1;
    console.log('Is last cell?', isLastCell);
    
    const logEntry = {
      sourceFile: metadata.sourceFile || 'unknown',
      tableIndex: metadata.tableIndex || 0,
      page: metadata.page || 1,
      key: cellKey,
      value: cellValue,
      timestamp: new Date().toISOString(),
      mode: 'cell',
      rowIndex: currentRowIdx,
      cellIndex: currentCellIdx
    };
    
    try {
      await logCurationAction(currentTask.path, logEntry);
      await loadTaskLog();
      
      if (isLastCell) {
        console.log('=== SETTING TASK FINISHED ===');
        setIsTaskFinished(true);
        return;
      }
    } catch (err) {
      console.error('Error logging cell action:', err);
    }

    if (currentCellIdx < totalCells - 1) {
      setCurrentCellIdx(currentCellIdx + 1);
    } else if (currentRowIdx < totalRows - 1) {
      onNext();
      setCurrentCellIdx(0);
    }
  };

  const handleRowNext = async () => {
    console.log('=== ROW NEXT ===');
    
    const isLastRow = currentRowIdx >= totalRows - 1;
    console.log('Is last row?', isLastRow);
    
    const metadata = currentRow._metadata || {};
    const cellEntries = columns.map((cellKey, cellIndex) => ({
      sourceFile: metadata.sourceFile || 'unknown',
      tableIndex: metadata.tableIndex || 0,
      page: metadata.page || 1,
      key: cellKey,
      value: currentRow[cellKey],
      timestamp: new Date().toISOString(),
      mode: 'row',
      rowIndex: currentRowIdx,
      cellIndex: cellIndex
    }));
    
    try {
      for (const entry of cellEntries) {
        await logCurationAction(currentTask.path, entry);
      }
      await loadTaskLog();
      
      if (isLastRow) {
        console.log('=== SETTING TASK FINISHED ===');
        setIsTaskFinished(true);
        return;
      }
    } catch (err) {
      console.error('Error logging row action:', err);
    }
    
    onNext();
    setCurrentCellIdx(0);
  };

  const handleCellPrev = () => {
    if (currentCellIdx > 0) {
      setCurrentCellIdx(currentCellIdx - 1);
    } else if (currentRowIdx > 0) {
      onPrev();
      setCurrentCellIdx(totalCells - 1);
    }
  };

  if (isTaskFinished) {
    console.log('=== RENDERING FINISHED VIEW ===');
    return (
      <div style={{
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
        height: '60vh',
        textAlign: 'center',
        padding: '20px',
        backgroundColor: isDark ? '#0a0a0a' : '#ffffff',
        border: '3px solid #24d453',
        borderRadius: '12px',
        boxShadow: '0 8px 32px rgba(36, 212, 83, 0.3)'
      }}>
        <div style={{ fontSize: 64, marginBottom: 20, color: '#24d453' }}>
          âœ…
        </div>
        <h1 style={{
          fontSize: 36,
          fontWeight: 700,
          color: isDark ? '#fff' : '#111',
          marginBottom: 12
        }}>
          Task Completed!
        </h1>
        <p style={{
          fontSize: 20,
          color: isDark ? 'rgba(255,255,255,0.8)' : 'rgba(0,0,0,0.8)',
          marginBottom: 40,
          maxWidth: 600
        }}>
          You have completed "{currentTask?.name}".
        </p>
        <button
          onClick={handleResetTask}
          style={{
            padding: '16px 32px',
            fontSize: 18,
            fontWeight: 600,
            border: 'none',
            borderRadius: 8,
            background: '#24d453',
            color: '#fff',
            cursor: 'pointer'
          }}
        >
          Reset Task
        </button>
      </div>
    );
  }

  return (
    <div>
      {/* Mode selector */}
      <div style={{
        display: 'flex',
        gap: 8,
        marginBottom: 16,
        padding: '8px',
        background: isDark ? 'rgba(255,255,255,0.03)' : 'rgba(0,0,0,0.03)',
        borderRadius: 8,
      }}>
        <button
          onClick={() => setCurationMode('row')}
          style={{
            padding: '8px 16px',
            fontSize: 13,
            fontWeight: 600,
            border: 'none',
            borderRadius: 6,
            background: curationMode === 'row' 
              ? (isDark ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.08)')
              : 'transparent',
            color: curationMode === 'row' 
              ? (isDark ? '#fff' : '#111')
              : (isDark ? 'rgba(255,255,255,0.6)' : 'rgba(0,0,0,0.6)'),
            cursor: 'pointer',
          }}
        >
          Row by Row (All Options)
        </button>
        <button
          onClick={() => setCurationMode('cell')}
          style={{
            padding: '8px 16px',
            fontSize: 13,
            fontWeight: 600,
            border: 'none',
            borderRadius: 6,
            background: curationMode === 'cell' 
              ? (isDark ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.08)')
              : 'transparent',
            color: curationMode === 'cell' 
              ? (isDark ? '#fff' : '#111')
              : (isDark ? 'rgba(255,255,255,0.6)' : 'rgba(0,0,0,0.6)'),
            cursor: 'pointer',
          }}
        >
          Cell by Cell
        </button>
      </div>

      {/* Source file and table information */}
      <div style={{
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        marginBottom: 12,
        padding: '8px 16px',
        background: isDark ? 'rgba(0,150,255,0.1)' : 'rgba(0,150,255,0.05)',
        border: isDark ? '1px solid rgba(0,150,255,0.3)' : '1px solid rgba(0,150,255,0.2)',
        borderRadius: 6,
        fontSize: 12,
        fontWeight: 600,
        color: isDark ? 'rgba(0,200,255,0.9)' : 'rgba(0,100,200,0.9)',
      }}>
        {currentRow._metadata ? (
          <>
            <span style={{ marginRight: 16 }}>
              ðŸ“„ File: {currentRow._metadata.sourceFile || 'unknown'}
            </span>
            <span>
              ðŸ“‹ Table: {currentRow._metadata.tableIndex || 0}
            </span>
          </>
        ) : (
          <span>No metadata available</span>
        )}
      </div>

      <div style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: 16,
        gap: 16,
      }}>
        <button
          onClick={curationMode === 'row' ? onPrev : handleCellPrev}
          disabled={curationMode === 'row' ? currentRowIdx <= 0 : (currentRowIdx === 0 && currentCellIdx === 0)}
          style={{
            padding: '8px 16px',
            fontSize: 13,
            fontWeight: 600,
            border: 'none',
            borderRadius: 6,
            background: isDark ? 'rgba(255,255,255,0.08)' : 'rgba(0,0,0,0.08)',
            color: isDark ? '#fff' : '#111',
            cursor: 'pointer',
            opacity: (curationMode === 'row' ? currentRowIdx <= 0 : (currentRowIdx === 0 && currentCellIdx === 0)) ? 0.5 : 1,
          }}
        >
          Previous
        </button>

        <div style={{
          fontSize: 13,
          color: isDark ? 'rgba(255,255,255,0.8)' : 'rgba(0,0,0,0.8)',
          fontWeight: 600,
        }}>
          {curationMode === 'row' 
            ? `Row ${currentRowIdx + 1} of ${totalRows}`
            : `Cell ${currentCellIdx + 1} of ${totalCells} (Row ${currentRowIdx + 1})`
          }
        </div>

        <button
          onClick={curationMode === 'row' ? handleRowNext : handleCellNext}
          style={{
            padding: '8px 16px',
            fontSize: 13,
            fontWeight: 600,
            border: 'none',
            borderRadius: 6,
            background: (currentRowIdx >= totalRows - 1 && (curationMode === 'row' || currentCellIdx >= totalCells - 1))
              ? 'linear-gradient(90deg, #24d453, #20c94b)'
              : (isDark ? 'rgba(255,255,255,0.08)' : 'rgba(0,0,0,0.08))',
            color: (currentRowIdx >= totalRows - 1 && (curationMode === 'row' || currentCellIdx >= totalCells - 1))
              ? '#fff'
              : (isDark ? '#fff' : '#111'),
            cursor: 'pointer',
          }}
        >
          {(currentRowIdx >= totalRows - 1 && (curationMode === 'row' || currentCellIdx >= totalCells - 1))
            ? 'Finish Task'
            : `Next`
          }
        </button>
      </div>

      <div style={{
        background: isDark ? 'rgba(255,255,255,0.03)' : 'rgba(0,0,0,0.03)',
        borderRadius: 8,
        padding: 16,
      }}>
        {curationMode === 'row' ? (
          <div>
            <div style={{
              fontSize: 16,
              fontWeight: 600,
              color: isDark ? 'rgba(255,255,255,0.9)' : 'rgba(0,0,0,0.9)',
              marginBottom: 20,
              textAlign: 'center',
              padding: '12px',
              background: isDark ? 'rgba(255,255,255,0.05)' : 'rgba(0,0,0,0.05)',
              borderRadius: 8,
            }}>
              Row {currentRowIdx + 1} of {totalRows} - All Fields with Options
            </div>
            <div style={{
              display: 'grid',
              gap: 16,
              gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
            }}>
              {columns.map((col) => {
                console.log('Rendering column:', col, 'data:', currentRow[col]);
                return (
                <div key={col} style={{
                  background: isDark ? 'rgba(255,255,255,0.02)' : 'rgba(0,0,0,0.02)',
                  borderRadius: 8,
                  padding: 12,
                  border: isDark ? '1px solid rgba(255,255,255,0.1)' : '1px solid rgba(0,0,0,0.1)'
                }}>
                  <div style={{
                    fontSize: 14,
                    fontWeight: 600,
                    color: isDark ? 'rgba(255,255,255,0.8)' : 'rgba(0,0,0,0.8)',
                    marginBottom: 8,
                    textTransform: 'capitalize',
                    borderBottom: isDark ? '1px solid rgba(255,255,255,0.1)' : '1px solid rgba(0,0,0,0.1)',
                    paddingBottom: 6
                  }}>
                    {col.replace(/_/g, ' ')}
                  </div>
                  <RenderCell
                    value={currentRow[col]}
                    onChange={(value) => {
                      console.log('RenderCell onChange:', col, value);
                      onSelect && onSelect(col, value);
                    }}
                    isDark={isDark}
                    textColor={textColor}
                  />
                </div>
                );
              })}
            </div>
          </div>
        ) : (
          <div>
            <div style={{
              fontSize: 16,
              fontWeight: 600,
              color: isDark ? 'rgba(255,255,255,0.9)' : 'rgba(0,0,0,0.9)',
              marginBottom: 20,
              textAlign: 'center',
              padding: '12px',
              background: isDark ? 'rgba(255,255,255,0.05)' : 'rgba(0,0,0,0.05)',
              borderRadius: 8,
            }}>
              Field: {columns[currentCellIdx]?.replace(/_/g, ' ')} â€¢ Row {currentRowIdx + 1}
            </div>
            <div style={{
              background: isDark ? 'rgba(255,255,255,0.02)' : 'rgba(0,0,0,0.02)',
              borderRadius: 8,
              padding: 16,
              border: isDark ? '1px solid rgba(255,255,255,0.1)' : '1px solid rgba(0,0,0,0.1)'
            }}>
              <RenderCell
                value={currentRow[columns[currentCellIdx]]}
                onChange={(value) => onSelect && onSelect(columns[currentCellIdx], value)}
                isDark={isDark}
                textColor={textColor}
              />
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
